{"version":3,"sources":["webpack:///./index.js","webpack:///./js/task3.js","webpack:///./js/task2.js","webpack:///./js/task1.js"],"names":["makeTransaction","transaction","delay","min","max","Math","floor","random","Promise","resolve","reject","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger","table","ms"],"mappings":"kHAAA,gD,mBCMA,MAIMA,EAAkBC,IACtB,MAAMC,GAL2BC,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAMtC,OAAO,IAAII,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUN,KAAKE,SAAW,GAEjCE,EAAQ,CAAEG,GAAIX,EAAYW,GAAIC,KAAMX,IAEpCQ,EAAOT,EAAYW,KAEpBV,MAIDY,EAAa,EAAGF,KAAIC,WACxBE,QAAQC,IAAK,eAAcJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,KAAM,gCAA+BN,+BAG/CZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAChEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAChEjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAC/DjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,I,qBC7BhE,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAO,IAAItB,QAAQ,CAACC,EAASC,KAC3BD,EAAQmB,MAING,EAASH,GAAgBb,QAAQiB,MAAMJ,GAE7CH,EAAgBH,EAAO,SAASF,KAAKW,GACrCN,EAAgBH,EAAO,OAAOF,KAAKW,I,mBCpBnC,MAAM7B,EAAQ+B,GACJ,IAAIzB,QAAQ,CAACC,EAASC,KAC5BC,WAAW,KACTF,EAAQwB,IACPA,KAIDF,EAASlB,GAAQE,QAAQC,IAAK,kBAAiBH,OAIrDX,EAAM,KAAMkB,KAAKW,GACjB7B,EAAM,KAAMkB,KAAKW,GACjB7B,EAAM,MAAMkB,KAAKW,K","file":"main.02e7a677868f85735842.js","sourcesContent":["import './styles.css';\r\nimport './js/task1';\r\nimport './js/task2';\r\nimport './js/task3';\r\n","// Задание 3\r\n\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала\r\n// callback-функции onSuccess и onError, а принимала всего один\r\n// параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","// Задание 2\r\n\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала\r\n// callback-функцию callback, а принимала всего два параметра allUsers\r\n// и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Задание 1\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий\r\n// в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося\r\n// промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n   return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n"],"sourceRoot":""}